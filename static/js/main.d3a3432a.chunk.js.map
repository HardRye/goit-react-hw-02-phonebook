{"version":3,"sources":["components/Phonebook/ContactForm/ContactForm.js","components/Phonebook/ContactList/ContactListElement.js","components/Phonebook/ContactList/ContactList.js","components/Phonebook/Filter/Filter.js","components/Phonebook/Phonebook.js","components/App.js","index.js"],"names":["ContactForm","state","name","number","handleFormSubmit","e","preventDefault","addContactIntoState","props","id","uuidv4","clearInputs","handleChange","target","value","setState","this","onSubmit","htmlFor","type","placeholder","onChange","Component","ContactListElement","renderContacts","deleteContacts","map","contact","key","onClick","ContactList","Filter","onFilter","filter","notyf","Notyf","filterContacts","contacts","toLowerCase","includes","trim","Phonebook","newContact","length","alert","deleteContactFromState","handleFilterChanges","filteredContacts","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.d3a3432a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid'; // usage - uuidv4();\n\nexport default class ContactForm extends Component {\n  static propTypes = {\n    addContactIntoState: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleFormSubmit = e => {\n    e.preventDefault();\n\n    const { name, number } = this.state;\n    const { addContactIntoState } = this.props;\n\n    addContactIntoState({\n      id: uuidv4(),\n      name,\n      number,\n    });\n\n    this.clearInputs();\n  };\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  };\n\n  clearInputs = () =>\n    this.setState({\n      name: '',\n      number: '',\n    });\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.handleFormSubmit}>\n        <label htmlFor=\"name\">\n          Name\n          <input\n            type=\"text\"\n            placeholder=\"Enter name...\"\n            name=\"name\"\n            value={name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label htmlFor=\"number\">\n          Number\n          <input\n            type=\"text\"\n            placeholder=\"Enter number...\"\n            name=\"number\"\n            value={number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <div>\n          <button type=\"submit\">Add contact</button>\n        </div>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ContactListElement({ renderContacts, deleteContacts }) {\n  return (\n    <>\n      {renderContacts.map(contact => (\n        <li key={contact.id}>\n          <span>{`${contact.name}: ${contact.number}`}</span>\n          <button type=\"button\" onClick={() => deleteContacts(contact.id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </>\n  );\n}\n\nContactListElement.propTypes = {\n  renderContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  deleteContacts: PropTypes.func.isRequired,\n};\n\nexport default ContactListElement;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactListElement from './ContactListElement';\n\nconst ContactList = ({ renderContacts, deleteContacts }) => (\n  <ul>\n    <ContactListElement\n      renderContacts={renderContacts}\n      deleteContacts={deleteContacts}\n    />\n  </ul>\n);\n\nContactList.propTypes = {\n  renderContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  deleteContacts: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Filter extends Component {\n  static propTypes = {\n    filter: PropTypes.string.isRequired,\n    onFilter: PropTypes.func.isRequired,\n  };\n\n  handleChange = e => {\n    const { value } = e.target;\n    const { onFilter } = this.props;\n\n    onFilter(value);\n  };\n\n  render() {\n    const { filter } = this.props;\n\n    return (\n      <>\n        <p>Find contacts by name</p>\n        <input\n          type=\"text\"\n          placeholder=\"Enter number...\"\n          name=\"filter\"\n          value={filter}\n          onChange={this.handleChange}\n        />\n      </>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Notyf from 'notyf-js';\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\n\nimport 'notyf-js/dist/notyf.min.css';\n\nconst notyf = new Notyf();\n\nconst filterContacts = (contacts, filter) => {\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.trim().toLowerCase()),\n  );\n};\n\nexport default class Phonebook extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  addContactIntoState = newContact => {\n    const { contacts } = this.state;\n    if (filterContacts(contacts, newContact.name).length) {\n      notyf.alert(`${newContact.name} is allready in phonebook`);\n      return;\n    }\n\n    this.setState(state => ({\n      contacts: [...state.contacts, newContact],\n    }));\n  };\n\n  deleteContactFromState = id => {\n    this.setState(state => ({\n      contacts: state.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  handleFilterChanges = filter => {\n    this.setState({ filter });\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n\n    const filteredContacts = filterContacts(contacts, filter);\n\n    return (\n      <>\n        <h1>Phonebok</h1>\n        <ContactForm addContactIntoState={this.addContactIntoState} />\n\n        <h2>Contacts</h2>\n        <Filter filter={filter} onFilter={this.handleFilterChanges} />\n        <ContactList\n          renderContacts={filteredContacts}\n          deleteContacts={this.deleteContactFromState}\n        />\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport Phonebook from './Phonebook/Phonebook';\n\nconst App = () => (\n  <div>\n    <Phonebook />\n  </div>\n);\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}